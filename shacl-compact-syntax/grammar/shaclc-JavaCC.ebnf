/* converted on Mon Mar 18, 2024, 18:17 (UTC+02) by javacc-to-w3c v0.67 which is Copyright (c) 2011-2024 by Gunther Rademacher <grd@gmx.net> */

Unit     ::= ByteOrderMark shaclDoc EOF
ByteOrderMark
         ::= BOM?
shaclDoc ::= directive* ( nodeShape | shapeClass )*
directive
         ::= baseDecl
           | prefixDecl
           | importDecl
baseDecl ::= 'BASE' IRIREF
prefixDecl
         ::= 'PREFIX' PNAME_NS IRIREF
importDecl
         ::= 'IMPORTS' iri
nodeShape
         ::= 'shape' iri targetClass? nodeShapeBody
shapeClass
         ::= 'shapeClass' iri nodeShapeBody
targetClass
         ::= '->' iri+
nodeShapeBody
         ::= '{' constraint* '}'
constraint
         ::= ( nodeOr+ | propertyShape | shapeRef ) '.'
nodeOr   ::= nodeNot ( '|' nodeNot )*
nodeNot  ::= '!'? nodeValue
nodeValue
         ::= nodeParam '=' ( iriOrLiteral | array )
propertyShape
         ::= path ( propertyCount | propertyOr )*
propertyOr
         ::= propertyNot ( '|' propertyNot )*
propertyNot
         ::= '!'? propertyAtom
propertyAtom
         ::= propertyType
           | nodeKind
           | shapeRef
           | propertyValue
           | nodeShapeBody
propertyCount
         ::= '[' propertyMinCount '..' propertyMaxCount ']'
propertyMinCount
         ::= INTEGER
propertyMaxCount
         ::= INTEGER
           | '*'
propertyType
         ::= iri
nodeKind ::= 'BlankNode'
           | 'IRI'
           | 'Literal'
           | 'BlankNodeOrIRI'
           | 'BlankNodeOrLiteral'
           | 'IRIOrLiteral'
shapeRef ::= ATPNAME_LN
           | ATPNAME_NS
           | '@' IRIREF
propertyValue
         ::= propertyParam '=' ( iriOrLiteral | array )
nodeParam
         ::= 'targetNode'
           | 'targetObjectsOf'
           | 'targetSubjectsOf'
           | 'targetClass'
           | 'deactivated'
           | 'severity'
           | 'message'
           | 'class'
           | 'datatype'
           | 'nodeKind'
           | 'minExclusive'
           | 'minInclusive'
           | 'maxExclusive'
           | 'maxInclusive'
           | 'minLength'
           | 'maxLength'
           | 'pattern'
           | 'flags'
           | 'languageIn'
           | 'equals'
           | 'disjoint'
           | 'closed'
           | 'ignoredProperties'
           | 'hasValue'
           | 'in'
propertyParam
         ::= 'deactivated'
           | 'severity'
           | 'message'
           | 'class'
           | 'datatype'
           | 'nodeKind'
           | 'minExclusive'
           | 'minInclusive'
           | 'maxExclusive'
           | 'maxInclusive'
           | 'minLength'
           | 'maxLength'
           | 'pattern'
           | 'flags'
           | 'languageIn'
           | 'uniqueLang'
           | 'equals'
           | 'disjoint'
           | 'lessThan'
           | 'lessThanOrEquals'
           | 'qualifiedValueShape'
           | 'qualifiedMinCount'
           | 'qualifiedMaxCount'
           | 'qualifiedValueShapesDisjoint'
           | 'closed'
           | 'ignoredProperties'
           | 'hasValue'
           | 'in'
           | 'group'
           | 'order'
           | 'name'
           | 'description'
           | 'defaultValue'
PathUnit ::= ByteOrderMark path EOF
path     ::= pathAlternative
pathAlternative
         ::= pathSequence ( '|' pathSequence )*
pathSequence
         ::= pathEltOrInverse ( '/' pathEltOrInverse )*
pathElt  ::= pathPrimary pathMod?
pathEltOrInverse
         ::= '^'? pathElt
pathMod  ::= '?'
           | '*'
           | '+'
pathPrimary
         ::= iri
           | '(' path ')'
array    ::= '[' iriOrLiteral* ']'
iriOrLiteral
         ::= iri
           | literal
literal  ::= rdfLiteral
           | numericLiteral
           | booleanLiteral
booleanLiteral
         ::= 'true'
           | 'false'
numericLiteral
         ::= INTEGER
           | DECIMAL
           | DOUBLE
rdfLiteral
         ::= string ( LANGTAG | '^^' datatype )?
datatype ::= iri
string   ::= STRING_LITERAL1
           | STRING_LITERAL2
           | STRING_LITERAL_LONG1
           | STRING_LITERAL_LONG2
iri      ::= IRIREF
           | PrefixedName
PrefixedName
         ::= PNAME_LN
           | PNAME_NS
IRIREF   ::= IRIref

<?TOKENS?>

SINGLE_LINE_COMMENT
         ::= '#' [^#xA#xD]* #xD? #xA?
BOM      ::= #xFEFF
HEX      ::= [0-9A-Fa-f]
IRIref   ::= '<' ( [^><"{}^\|`#x0-#x20] | UCHAR )* '>'
PNAME_NS ::= PN_PREFIX? ':'
PNAME_LN ::= PNAME_NS PN_LOCAL
ATPNAME_NS
         ::= '@' PNAME_NS
ATPNAME_LN
         ::= '@' PNAME_LN
ECHAR    ::= '\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\' | '"' | "'" )
UCHAR    ::= UCHAR4
           | UCHAR8
UCHAR4   ::= '\' 'u' HEX HEX HEX HEX
UCHAR8   ::= '\' 'U' HEX HEX HEX HEX HEX HEX HEX HEX
STRING_LITERAL1
         ::= "'" ( [^'\#xA#xD] | ECHAR | UCHAR )* "'"
STRING_LITERAL2
         ::= '"' ( [^"\#xA#xD] | ECHAR | UCHAR )* '"'
STRING_LITERAL_LONG1
         ::= "'''" ( ( "'" | "''" )? ( [^'\] | ECHAR | UCHAR ) )* "'''"
STRING_LITERAL_LONG2
         ::= '"""' ( ( '"' | '""' )? ( [^"\] | ECHAR | UCHAR ) )* '"""'
DIGITS   ::= [0-9]+
INTEGER  ::= ( '+' | '-' )? DIGITS
DECIMAL  ::= ( '+' | '-' )? DIGITS? '.' DIGITS
DOUBLE   ::= ( '+' | '-' )? ( [0-9]+ ( '.' [0-9]* )? | '.' [0-9]+ ) EXPONENT
EXPONENT ::= [eE] [+#x2D]? [0-9]+
LANGTAG  ::= '@' A2Z+ ( '-' A2ZN+ )*
A2Z      ::= [a-zA-Z]
A2ZN     ::= [a-zA-Z0-9]
SURROGATE_PAIR
         ::= [#xD800-#xDBFF] [#xDC00-#xDFFF]
PN_CHARS_BASE
         ::= [A-Za-z#xC0-#xD6#xD8-#xF6#xF8-#x2FF#x370-#x37D#x37F-#x1FFF#x200C-#x200D#x2070-#x218F#x2C00-#x2FEF#x3001-#xD7FF#xF900-#xFFFD]
           | SURROGATE_PAIR
PN_CHARS_U
         ::= PN_CHARS_BASE
           | '_'
PN_CHARS ::= PN_CHARS_U
           | [-0-9#xB7#x300-#x36F#x203F-#x2040]
PN_PREFIX
         ::= PN_CHARS_BASE ( ( PN_CHARS | '.' )* PN_CHARS )?
PN_LOCAL ::= ( PN_CHARS_U | [:0-9] | PLX ) ( ( PN_CHARS | '.' | ':' | PLX )* ( PN_CHARS | ':' | PLX ) )?
VARNAME  ::= ( PN_CHARS_U | [0-9] ) ( PN_CHARS_U | [0-9#xB7#x300-#x36F#x203F-#x2040] )*
PN_LOCAL_ESC
         ::= '\' ( '_' | '~' | '.' | '-' | '!' | '$' | '&' | "'" | '(' | ')' | '*' | '+' | ',' | ';' | '=' | '/' | '?' | '#' | '@' | '%' )
PLX      ::= PERCENT
           | PN_LOCAL_ESC
PERCENT  ::= '%' HEX HEX
UNKNOWN  ::= [^ #x9#xA#xD#xC]+
EOF      ::= $